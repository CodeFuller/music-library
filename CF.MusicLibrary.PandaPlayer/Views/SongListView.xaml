<UserControl x:Class="CF.MusicLibrary.PandaPlayer.Views.SongListView"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
             xmlns:views="clr-namespace:CF.MusicLibrary.PandaPlayer.Views"
             xmlns:valueConverters="clr-namespace:CF.MusicLibrary.PandaPlayer.Views.ValueConverters"
             mc:Ignorable="d" 
             d:DesignWidth="800" d:DesignHeight="600">

    <UserControl.Resources>
        <valueConverters:SongDurationValueConverter x:Key="SongDurationValueConverter" />
        <valueConverters:SongBitrateValueConverter x:Key="SongBitrateValueConverter" />
        <valueConverters:SongFileSizeValueConverter x:Key="SongFileSizeValueConverter" />
        <valueConverters:SongLastPlaybackValueConverter x:Key="SongLastPlaybackValueConverter" />
        <valueConverters:RatingToImageNameValueConverter x:Key="RatingToImageValueConverter" />
        <valueConverters:BooleanToVisibilityValueConverter x:Key="BooleanToVisibilityValueConverter" />
    </UserControl.Resources>

    <Grid>

        <Grid.RowDefinitions>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="*"/>
            <RowDefinition Height="Auto"/>
        </Grid.RowDefinitions>

        <!-- https://stackoverflow.com/a/22074985/5740031 -->
        <FrameworkElement Grid.Row="0" x:Name="DummyElement" Visibility="Collapsed" />

        <views:MultiSelectionDataGrid Grid.Row="1" x:Name="SongsDataGrid" AutoGenerateColumns="False" HeadersVisibility="Column" GridLinesVisibility="None"
              ColumnHeaderHeight="20"
              CanUserAddRows="False" CanUserDeleteRows="False" CanUserResizeRows="False"
              Background="#1B1B1B" RowBackground="#1B1B1B" Foreground="White"
              ItemsSource="{Binding SongItems}" SelectedItem="{Binding SelectedSongItem}" SelectedItemsList="{Binding SelectedSongItems, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}">

            <DataGrid.ContextMenu>
                <ContextMenu>
                    <MenuItem Header="Set Rating" ItemsSource="{Binding SetRatingMenuItems}">
                        <MenuItem.ItemContainerStyle>
                            <Style TargetType="MenuItem" BasedOn="{StaticResource {x:Type MenuItem}}">
                                <Setter Property="HeaderTemplate">
                                    <Setter.Value>
                                        <DataTemplate>
                                            <Image Height="15" Source="{Binding Rating, Converter={StaticResource RatingToImageValueConverter}}" />
                                        </DataTemplate>
                                    </Setter.Value>
                                </Setter>
                                <Setter Property="Command" Value="{Binding Command}" />
                            </Style>
                        </MenuItem.ItemContainerStyle>
                    </MenuItem>
                    <MenuItem Header="Properties" Command="{Binding EditSongsPropertiesCommand}"/>
                </ContextMenu>
            </DataGrid.ContextMenu>

            <DataGrid.InputBindings>
                <MouseBinding Gesture="LeftDoubleClick" Command="{Binding PlayDiscFromSongCommand}" />
            </DataGrid.InputBindings>

            <DataGrid.ColumnHeaderStyle>
                <Style TargetType="{x:Type DataGridColumnHeader}">
                    <Setter Property="HorizontalContentAlignment" Value="Center" />
                    <Setter Property="Background" Value="#4B4B4B" />
                    <Setter Property="BorderBrush" Value="Gray"/>
                    <Setter Property="BorderThickness" Value="0,0,1,0"/>
                </Style>
            </DataGrid.ColumnHeaderStyle>
            <DataGrid.Resources>
                <Style TargetType="{x:Type DataGridRow}">
                    <Style.Triggers>
                        <DataTrigger Binding="{Binding IsCurrentlyPlayed}" Value="True">
                            <Setter Property="FontWeight" Value="Bold" />
                        </DataTrigger>
                    </Style.Triggers>
                </Style>
            </DataGrid.Resources>
            <DataGrid.Columns>
                <DataGridTextColumn Header="Artist" MinWidth="400" IsReadOnly="True" Binding="{Binding Song.Artist.Name}" />
                <DataGridTextColumn Header="Track #" MinWidth="60" IsReadOnly="True" Binding="{Binding Song.TrackNumber}"
                                Visibility="{Binding DataContext.DisplayTrackNumbers, Source={x:Reference DummyElement}, Converter={StaticResource BooleanToVisibilityValueConverter}}">
                    <DataGridTextColumn.CellStyle>
                        <Style TargetType="DataGridCell">
                            <Setter Property="TextBlock.TextAlignment" Value="Right"/>
                        </Style>
                    </DataGridTextColumn.CellStyle>
                </DataGridTextColumn>
                <DataGridTextColumn Header="Title" MinWidth="600" IsReadOnly="True" Binding="{Binding Song.Title}" />
                <DataGridTextColumn Header="Length" MinWidth="60" IsReadOnly="True" Binding="{Binding Song.Duration, Converter={StaticResource SongDurationValueConverter}}">
                    <DataGridTextColumn.CellStyle>
                        <Style TargetType="DataGridCell">
                            <Setter Property="TextBlock.TextAlignment" Value="Right"/>
                        </Style>
                    </DataGridTextColumn.CellStyle>
                </DataGridTextColumn>
                <DataGridTextColumn Header="Bitrate" MinWidth="60" IsReadOnly="True" Binding="{Binding Song.Bitrate, Converter={StaticResource SongBitrateValueConverter}}">
                    <DataGridTextColumn.CellStyle>
                        <Style TargetType="DataGridCell">
                            <Setter Property="TextBlock.TextAlignment" Value="Right"/>
                        </Style>
                    </DataGridTextColumn.CellStyle>
                </DataGridTextColumn>
                <DataGridTextColumn Header="File Size" MinWidth="60" IsReadOnly="True" Binding="{Binding Song.FileSize, Converter={StaticResource SongFileSizeValueConverter}}">
                    <DataGridTextColumn.CellStyle>
                        <Style TargetType="DataGridCell">
                            <Setter Property="TextBlock.TextAlignment" Value="Right"/>
                        </Style>
                    </DataGridTextColumn.CellStyle>
                </DataGridTextColumn>
                <DataGridTextColumn Header="Played #" MinWidth="60" IsReadOnly="True" Binding="{Binding Song.PlaybacksCount}">
                    <DataGridTextColumn.CellStyle>
                        <Style TargetType="DataGridCell">
                            <Setter Property="TextBlock.TextAlignment" Value="Right"/>
                        </Style>
                    </DataGridTextColumn.CellStyle>
                </DataGridTextColumn>
                <DataGridTextColumn Header="Last Played" MinWidth="120" IsReadOnly="True" Binding="{Binding Song.LastPlaybackTime, Converter={StaticResource SongLastPlaybackValueConverter}}">
                    <DataGridTextColumn.CellStyle>
                        <Style TargetType="DataGridCell">
                            <Setter Property="TextBlock.TextAlignment" Value="Center"/>
                        </Style>
                    </DataGridTextColumn.CellStyle>
                </DataGridTextColumn>
                <DataGridTemplateColumn Header="Rating" MinWidth="150" IsReadOnly="True">
                    <DataGridTemplateColumn.CellTemplate>
                        <DataTemplate>
                            <Image Height="15" HorizontalAlignment="Left" Source="{Binding Song.Rating, Converter={StaticResource RatingToImageValueConverter}}" />
                        </DataTemplate>
                    </DataGridTemplateColumn.CellTemplate>
                </DataGridTemplateColumn>
            </DataGrid.Columns>
        </views:MultiSelectionDataGrid>
        <StackPanel Grid.Row="2" Orientation="Horizontal" Background="#505050">
            <Label MinWidth="80" HorizontalContentAlignment="Center" Background="#505050">
                <Label.Style>
                    <Style TargetType="{x:Type Label}" BasedOn="{StaticResource {x:Type Label}}">
                        <Style.Triggers>
                            <DataTrigger Binding="{Binding HasSongs}" Value="True">
                                <Setter Property="Content" Value="{Binding SongsNumber}" />
                                <Setter Property="ContentStringFormat" Value="{}{0} song(s)" />
                            </DataTrigger>
                            <!-- Using 'space' instead of empty line so that Label height is the same in both cases -->
                            <DataTrigger Binding="{Binding HasSongs}" Value="False">
                                <Setter Property="Content" Value=" " />
                            </DataTrigger>
                        </Style.Triggers>
                    </Style>
                </Label.Style>
            </Label>
            <Separator Style="{StaticResource {x:Static ToolBar.SeparatorStyleKey}}" Margin="0" />
            <Label MinWidth="60" HorizontalContentAlignment="Center" Background="#505050">
                <Label.Style>
                    <Style TargetType="{x:Type Label}" BasedOn="{StaticResource {x:Type Label}}">
                        <Style.Triggers>
                            <DataTrigger Binding="{Binding HasSongs}" Value="True">
                                <Setter Property="Content" Value="{Binding TotalSongsDuration, Converter={StaticResource SongDurationValueConverter}}" />
                            </DataTrigger>
                            <!-- Using 'space' instead of empty line so that Label height is the same in both cases -->
                            <DataTrigger Binding="{Binding HasSongs}" Value="False">
                                <Setter Property="Content" Value=" " />
                            </DataTrigger>
                        </Style.Triggers>
                    </Style>
                </Label.Style>
            </Label>
            <Separator Style="{StaticResource {x:Static ToolBar.SeparatorStyleKey}}" Margin="0" />
            <Label MinWidth="70" HorizontalContentAlignment="Center" Background="#505050">
                <Label.Style>
                    <Style TargetType="{x:Type Label}" BasedOn="{StaticResource {x:Type Label}}">
                        <Style.Triggers>
                            <DataTrigger Binding="{Binding HasSongs}" Value="True">
                                <Setter Property="Content" Value="{Binding TotalSongsFileSize, Converter={StaticResource SongFileSizeValueConverter}}" />
                            </DataTrigger>
                            <!-- Using 'space' instead of empty line so that Label height is the same in both cases -->
                            <DataTrigger Binding="{Binding HasSongs}" Value="False">
                                <Setter Property="Content" Value=" " />
                            </DataTrigger>
                        </Style.Triggers>
                    </Style>
                </Label.Style>
            </Label>
            <Separator Style="{StaticResource {x:Static ToolBar.SeparatorStyleKey}}" Margin="0" />
        </StackPanel>
    </Grid>

</UserControl>
